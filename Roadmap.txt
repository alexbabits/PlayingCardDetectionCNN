1. Figure out what the training and validation sets need to be. (Images and their corresponding labels/target).
2. Modify the base MNIST CNN model for the playing cards. 
3. End goal is to output a list of the card predictions from a single screenshot - real world compatibility.


-Faster R-CNN (Can handle detecting multiple objects (cards) within an image.) (Can be slow)
-YOLOv5 or v8. (Can handle detecting multiple objects (cards) within an image.) (Faster than R-CNN)


Use a pre-trained Faster R-CNN model (available in the torchvision.models module) as a starting point. You'll need to replace the last layer of the model to match the number of classes in your dataset.

Fine-tune the Faster R-CNN model on your dataset. You can freeze the early layers of the model and train only the later layers, or train the entire model depending on your computational resources and the size of your dataset.

Evaluate the model on the validation set and fine-tune the hyperparameters as needed.
